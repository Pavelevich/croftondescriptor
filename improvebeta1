__device__ void interpolate(const float boundary[], const int indx[], const int startIndex, const int endIndex, const int m, const float p, const float angle, float p2[], const int N) 
{    
    const int numPoints = endIndex - startIndex + 1;
    float p0[2] = { boundary[startIndex * N], boundary[startIndex * N + 1] };
    float p1[2] = { boundary[endIndex * N], boundary[endIndex * N + 1] };
    
    // Calculate coefficients for the line to obtain the intersection
    const float A2 = cosf(angle);
    const float B2 = sinf(angle);
    const float C2 = -p;
    const float slope = (p0[1] - p1[1]) / (p0[0] - p1[0]);

    float A1, B1, C1, x, y;
    if (p0[0] != p1[0]) 
    {
        // Equation of the line
        A1 = slope;
        B1 = -1;
        C1 = p0[1] - slope * p0[0];

        if (B1 == -B2 || B1 == B2) 
        {
            // Lines are parallel
            x = (p0[0] + p1[0]) / 2;
            y = (p0[1] + p1[1]) / 2;
        } 
        else 
        {
            y = (A1 * C2 - A2 * C1) / (A2 * B1 - A1 * B2);
            x = (-B2 * y - C2) / A2;
        }
    } 
    else 
    {
        if (-1 == -B2) 
        {
            // Lines are parallel
            x = (p0[0] + p1[0]) / 2;
            y = (p0[1] + p1[1]) / 2;
        } 
        else 
        {
            x = p0[0];
            y = (-A2 * x - C2) / B2;
        }
    }
    p2[0] = x; 
    p2[1] = y;
}
